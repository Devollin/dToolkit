"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7224],{61149:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new signal.\\n\\n```lua\\nlocal newSimpleSignal: SimpleSignal<boolean, string> = SimpleSignal.new()\\n```","params":[],"returns":[{"desc":"","lua_type":"Signal<b...>\\r\\n"}],"function_type":"static","source":{"line":55,"path":"lib/SimpleSignal.lua"}},{"name":"Fire","desc":"Fire the event with the given arguments. All handlers will be invoked. Handlers follow Roblox signal conventions.\\n\\n```lua\\nnewSimpleSignal:Fire(true, \\"boot\\")\\n```\\n\\n\\n\\t","params":[{"name":"...","desc":"Variable arguments to pass to handler","lua_type":"b..."}],"returns":[],"function_type":"method","source":{"line":75,"path":"lib/SimpleSignal.lua"}},{"name":"Connect","desc":"Connect a new handler to the event. Returns a connection object that can be disconnected.\\n\\n```lua\\nlocal newConnection = newSimpleSignal:Connect(function(foo, bar)\\n\\tif foo then\\n\\t\\tprint(bar)\\n\\telse\\n\\t\\tprint(bar:reverse())\\n\\tend\\nend)\\n```\\n\\n\\n\\n\\t","params":[{"name":"callback","desc":"Function handler called with arguments passed when :Fire(...) is called.","lua_type":"(b...) -> ()"}],"returns":[{"desc":"Connection object that can be disconnected.","lua_type":"RBXScriptConnection?"}],"function_type":"method","source":{"line":106,"path":"lib/SimpleSignal.lua"}},{"name":"Wait","desc":"Wait for `:Fire(...)` to be called, and return the arguments it was given.\\n\\n```lua\\ntask.spawn(function()\\n\\ttask.wait(5)\\n\\t\\n\\tnewSimpleSignal:Fire(false, \\"bar\\")\\nend)\\n\\nlocal foo, bar = newSimpleSignal:Wait()\\n```\\n\\n\\n\\t","params":[],"returns":[{"desc":"Variable arguments from connection","lua_type":"any..."}],"function_type":"method","source":{"line":133,"path":"lib/SimpleSignal.lua"}},{"name":"Destroy","desc":"Disconnects all connected events to the signal. Voids the signal as unusable.\\n\\n```lua\\nnewSimpleSignal:Destroy()\\n```\\n\\n\\t","params":[],"returns":[],"function_type":"method","source":{"line":152,"path":"lib/SimpleSignal.lua"}}],"properties":[],"types":[],"name":"SimpleSignal","desc":"Signal class based on BindableEvents.\\n\\n```lua\\nlocal newSimpleSignal: SimpleSignal<boolean, string> = SimpleSignal.new()\\n\\nlocal newConnection = newSimpleSignal:Connect(function(foo, bar)\\n\\tif foo then\\n\\t\\tprint(bar)\\n\\telse\\n\\t\\tprint(bar:reverse())\\n\\tend\\nend)\\n\\nnewSimpleSignal:Fire(true, \\"boot\\")\\n\\nnewConnection:Disconnect()\\n```","source":{"line":45,"path":"lib/SimpleSignal.lua"}}')}}]);