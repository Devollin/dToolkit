"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9084],{3892:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new [PlayerStorageResult] object.","params":[{"name":"name","desc":"The name of the [GlobalDataStore].","lua_type":"string"},{"name":"scope","desc":"The scope of the [GlobalDataStore].","lua_type":"string?"},{"name":"options","desc":"Options to modify DataStores.","lua_type":"DataStoreOptions?"},{"name":"default","desc":"Default data to be used for blank entries.","lua_type":"Default"}],"returns":[{"desc":"","lua_type":"PlayerStorageResult\\r\\n"}],"function_type":"static","yields":true,"source":{"line":151,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"HardLoad","desc":"Performs GetAsync if the data requested by the index does not exist, and returns the data. Additionally, it creates\\n\\tan autosave timer for the player\'s data.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore]","lua_type":"number"}],"returns":[{"desc":"","lua_type":"DataResult\\r\\n"}],"function_type":"static","yields":true,"source":{"line":188,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SoftLoad","desc":"Returns data associated with the index, if it has been loaded already.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"number"}],"returns":[{"desc":"","lua_type":"DataResult\\r\\n"}],"function_type":"static","source":{"line":199,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"HardSave","desc":"Performs SetAsync with the data associated with the index, if it isn\'t already being saved.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"number"},{"name":"setOptions","desc":"Options used to adjust SetAsync.","lua_type":"DataStoreSetOptions?"},{"name":"context","desc":"The context from which this function was called. Useful for debugging.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"SaveResult\\r\\n"}],"function_type":"static","yields":true,"source":{"line":213,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SoftSave","desc":"Replaces all the data associated with the id.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"number"},{"name":"newData","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"SaveResult\\r\\n"}],"function_type":"static","source":{"line":224,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"Update","desc":"Saves the data associated with the id, if it isn\'t already being saved.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"number"},{"name":"key","desc":"The key within the data.","lua_type":"(string | number)"},{"name":"newData","desc":"The data to replace the contents of the key.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"SaveResult\\r\\n"}],"function_type":"static","source":{"line":237,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"DeepUpdate","desc":"Saves the data associated with the indexes, if it isn\'t already being saved.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"string"},{"name":"newData","desc":"The data to replace the contents of the key.","lua_type":"any"},{"name":"key","desc":"The key within the data.","lua_type":"(string | number)"},{"name":"...","desc":"The key indexer(s) within the data.","lua_type":"(string | number)"}],"returns":[{"desc":"","lua_type":"SaveResult\\r\\n"}],"function_type":"static","source":{"line":251,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"Clear","desc":"Hard saves the player\'s data, then removes the data associated with the id. Additionally, it stops and destroys the\\n\\tautosave timer.\\n\\n\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"},{"name":"index","desc":"The key within the [GlobalDataStore].","lua_type":"number"},{"name":"context","desc":"The context from which this function was called. Useful for debugging.","lua_type":"string"}],"returns":[],"function_type":"static","yields":true,"source":{"line":265,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"Close","desc":"Saves all data, and clears it\'s own members.\\n\\t","params":[{"name":"self","desc":"","lua_type":"PlayerStorage"}],"returns":[],"function_type":"static","yields":true,"source":{"line":274,"path":"lib/Storage/PlayerDataStore.lua"}}],"properties":[{"name":"LoadSuccess","desc":"Fired when Storage succeeds in loading from the [GlobalDataStore].\\nThe only param passed is the index.","lua_type":"Signal<string>","tags":["Event"],"source":{"line":45,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"LoadRetry","desc":"Fired when Storage is going to retry loading the requested data, if it previously failed.\\nThe first param is the error message, the second param is the name of the Storage, the third param is the scope, and the\\nlast param is the key.","lua_type":"Signal<string, string, string?, string>","tags":["Event"],"source":{"line":54,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"LoadFail","desc":"Fired when Storage failed to load the requested data after retrying several times.\\nThe first param is the error message, the second param is the name of the Storage, the third param is the scope, and the\\nlast param is the key.","lua_type":"Signal<string, string, string?, string>","tags":["Event"],"source":{"line":63,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SaveStart","desc":"Fired when Storage is going to try to save to [GlobalDataStore].\\nThe only param passed is the index.","lua_type":"Signal<string>","tags":["Event"],"source":{"line":71,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SaveRetry","desc":"Fired when Storage is going to retry saving the requested data, if it previously failed.\\nThe first param is the error message, the second param is the name of the Storage, the third param is the scope, and the\\nlast param is the key.","lua_type":"Signal<string, string, string?, string>","tags":["Event"],"source":{"line":80,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SaveFail","desc":"Fired when Storage failed to load the requested data after retrying several times.\\nThe first param is the error message, the second param is the name of the Storage, the third param is the scope, and the\\nlast param is the key.","lua_type":"Signal<string, string, string?, string>","tags":["Event"],"source":{"line":89,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"SaveSuccess","desc":"Fired when Storage successfully saved to the [GlobalDataStore].\\nThe only param passed is the index.","lua_type":"Signal<string>","tags":["Event"],"source":{"line":97,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"FilledBlankStorage","desc":"Fired when Storage fills in an empty key.\\nThe first param is the name of the Storage, the second param is the scope, and the last param is the index.","lua_type":"Signal<string, string?, string>","tags":["Event"],"source":{"line":105,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"KeyUpdated","desc":"Fired when a key in Storage is updated.\\nThe first param is the name of the Storage, the second param is the name of the key, the third param is the new data, and\\nthe last param is the old data.","lua_type":"Signal<string, string | number, any, any>","tags":["Event"],"source":{"line":114,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"DeepKeyUpdated","desc":"Fired when a key deep in Storage is updated.\\nThe first param is the name of the index, the second param is the new data, the third param is the new old data, and the\\nlast param is an array of all the additional keys given.","lua_type":"Signal<string, any, any, {string | number}>","tags":["Event"],"source":{"line":123,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"MiscMessage","desc":"Fired when an error or warning code has been propagated by Storage.\\nThe first param is the code, the second param is the trackback, and the last param is the name of the key.","lua_type":"Signal<ErrorCode, string, string>","tags":["Event"],"source":{"line":131,"path":"lib/Storage/PlayerDataStore.lua"}},{"name":"VerifyData","desc":"Invoked when the callback is filled and Storage is requesting to save data. Use this to prevent overwriting new data.\\nThe first parameter passed is the name of the key, the second parameter old data, the third is the new data, and the last\\nis the context it was called from (this is useful for debugging).","lua_type":"SimpleFunction<(string, Default, Default, string), (Default?)>","source":{"line":139,"path":"lib/Storage/PlayerDataStore.lua"}}],"types":[{"name":"PlayerStorageResult","desc":"A dictionary containing a success boolean, a message (if getting the DataStore fails), and a result (if getting the\\n\\tDataStore succeeds, this is the PlayerStorage object).","lua_type":"Result<PlayerStorage?>","source":{"line":96,"path":"lib/Storage/Types.lua"}}],"name":"PlayerStorage","desc":"A player-focused [GlobalDataStore] wrapper object.","realm":["Server"],"source":{"line":37,"path":"lib/Storage/PlayerDataStore.lua"}}')}}]);