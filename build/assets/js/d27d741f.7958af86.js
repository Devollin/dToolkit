"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7700],{49164:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Signal object.\\n\\n```lua\\nlocal newSignal: Signal<boolean, string> = Signal.new()\\n```","params":[],"returns":[{"desc":"","lua_type":"Signal<b...>\\r\\n"}],"function_type":"static","source":{"line":149,"path":"lib/Signal.lua"}},{"name":"Connect","desc":"Adds a listener for the [Signal], and returns a [Connection].\\n\\n```lua\\nlocal newConnection = newSignal:Connect(function(foo, bar)\\n\\tif foo then\\n\\t\\tprint(bar)\\n\\telse\\n\\t\\tprint(bar:reverse())\\n\\tend\\nend)\\n```\\n\\n\\t","params":[{"name":"callback","desc":"","lua_type":"(b...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection<b...>\\r\\n"}],"function_type":"method","source":{"line":169,"path":"lib/Signal.lua"}},{"name":"Destroy","desc":"Disconnects every [Connection] to the [Signal].\\n\\n```lua\\nnewSignal:Destroy()\\n```\\n\\n\\t","params":[],"returns":[],"function_type":"method","source":{"line":192,"path":"lib/Signal.lua"}},{"name":"Fire","desc":"Triggers every [Connection] that is subscribed to the [Signal], passing along any parameters in the process.\\n\\n```lua\\nnewSignal:Fire(true, \\"boot\\")\\n```\\n\\n\\t","params":[{"name":"...","desc":"","lua_type":"b..."}],"returns":[],"function_type":"method","source":{"line":205,"path":"lib/Signal.lua"}},{"name":"Wait","desc":"Waits until the [Signal] is fired, and returns any parameters passed with it.\\n\\n```lua\\ntask.spawn(function()\\n\\ttask.wait(5)\\n\\t\\n\\tnewSignal:Fire(false, \\"bar\\")\\nend)\\n\\nlocal foo, bar = newSignal:Wait()\\n```\\n\\n\\t","params":[],"returns":[{"desc":"","lua_type":"b..."}],"function_type":"method","yields":true,"source":{"line":240,"path":"lib/Signal.lua"}},{"name":"Once","desc":"Returns a [Connection], which will be automatically disconnected when the [Signal] is fired.\\n\\n```lua\\nlocal tempConnection = newSignal:Once(function(foo, bar)\\n\\tprint(\\"i am self-destructing now!\\", foo, bar)\\nend)\\n\\nnewSignal:Fire(true, \\"boo!\\")\\nnewSignal:Fire(false, \\"scared them too much, oops\\")\\n```\\n\\n\\t","params":[{"name":"callback","desc":"","lua_type":"(b...) -> ()"}],"returns":[{"desc":"","lua_type":"Connection<b...>\\r\\n"}],"function_type":"method","source":{"line":267,"path":"lib/Signal.lua"}}],"properties":[],"types":[],"name":"Signal","desc":"A Signal class used to create custom events.\\n\\n```lua\\nlocal newSignal: Signal<boolean, string> = Signal.new()\\n\\nlocal newConnection = newSignal:Connect(function(foo, bar)\\n\\tif foo then\\n\\t\\tprint(bar)\\n\\telse\\n\\t\\tprint(bar:reverse())\\n\\tend\\nend)\\n\\nnewSignal:Fire(true, \\"boot\\")\\n\\nnewConnection:Disconnect()\\n```","source":{"line":137,"path":"lib/Signal.lua"}}')}}]);