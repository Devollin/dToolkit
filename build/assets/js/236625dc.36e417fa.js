"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5236],{18001:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetCharacterFromPlayerAsync","desc":"Returns the character of a given Player, or returns nil if there is no character or player.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Model?\\r\\n"}],"function_type":"method","source":{"line":34,"path":"lib/PlayerUtil.lua"}},{"name":"GetCharacterFromPlayer","desc":"Returns the character of a given Player, or waits until the character exists.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Model?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":45,"path":"lib/PlayerUtil.lua"}},{"name":"GetHumanoidFromCharacter","desc":"Returns the humanoid of a given character, if it exists; and waits if it doesn\'t.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"Humanoid?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":56,"path":"lib/PlayerUtil.lua"}},{"name":"GetHumanoidFromCharacterAsync","desc":"Returns the humanoid of a given character, or nil if it doesn\'t exist.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"Humanoid?\\r\\n"}],"function_type":"method","source":{"line":66,"path":"lib/PlayerUtil.lua"}},{"name":"GetHumanoidFromPlayer","desc":"Returns the humanoid of a given player, if it exists; and waits if it doesn\'t.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Humanoid?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":77,"path":"lib/PlayerUtil.lua"}},{"name":"GetHumanoidFromPlayerAsync","desc":"Returns the humanoid of a given player, or nil if it doesn\'t exist.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Humanoid?\\r\\n"}],"function_type":"method","source":{"line":85,"path":"lib/PlayerUtil.lua"}},{"name":"GetRootFromCharacter","desc":"Returns the root part of the given character, if it exists; or waits if it doesn\'t.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","source":{"line":93,"path":"lib/PlayerUtil.lua"}},{"name":"GetRootFromPlayer","desc":"Returns the root part of the given player, if it exists; or waits if it doesn\'t.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":104,"path":"lib/PlayerUtil.lua"}},{"name":"GetRootFromPlayerAsync","desc":"Returns the root part of the given player, if it exists.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","source":{"line":115,"path":"lib/PlayerUtil.lua"}},{"name":"GetCharacterParts","desc":"Returns an array of all the parts within a character, and allows you to exclude some by name.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"A dictionary of all the parts in the character.","lua_type":"{[string]: BasePart}"}],"function_type":"method","yields":true,"source":{"line":130,"path":"lib/PlayerUtil.lua"}},{"name":"GetCharacterPartsWithBlacklist","desc":"Returns an array of all the parts within a character, and allows you to exclude some by name.","params":[{"name":"character","desc":"","lua_type":"Model?"},{"name":"blacklist","desc":"A table of character part names to exclude from the list.","lua_type":"{string}"}],"returns":[{"desc":"A dictionary of all the parts in the character, excluding those from the blacklist.","lua_type":"{[string]: BasePart}"}],"function_type":"method","source":{"line":153,"path":"lib/PlayerUtil.lua"}},{"name":"GetCharacterPartsWithWhitelist","desc":"Returns an array of requested parts within a character.","params":[{"name":"character","desc":"","lua_type":"Model?"},{"name":"whitelist","desc":"A dictionary of character part names to try to include on the list.","lua_type":"{string}"}],"returns":[{"desc":"A dictionary of all the parts in the character requested on the list.","lua_type":"{[string]: BasePart}"}],"function_type":"method","source":{"line":176,"path":"lib/PlayerUtil.lua"}},{"name":"GetPlayerFromPart","desc":"Returns the player from a part, if there is one.","params":[{"name":"part","desc":"","lua_type":"BasePart?"}],"returns":[{"desc":"","lua_type":"Player?\\r\\n"}],"function_type":"method","source":{"line":194,"path":"lib/PlayerUtil.lua"}},{"name":"GetCharacterFromPart","desc":"Returns the character from a part, if there is one.","params":[{"name":"part","desc":"","lua_type":"BasePart?"}],"returns":[{"desc":"","lua_type":"Model?\\r\\n"}],"function_type":"method","source":{"line":205,"path":"lib/PlayerUtil.lua"}},{"name":"GetToolFromPlayerByName","desc":"Returns the tool from a given player and tool name, if it can be found.","params":[{"name":"player","desc":"","lua_type":"Player?"},{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Tool?\\r\\n"}],"function_type":"method","source":{"line":220,"path":"lib/PlayerUtil.lua"}},{"name":"DoesPlayerHaveTool","desc":"Returns a boolean describing if the player has the given tool in their inventory.","params":[{"name":"player","desc":"","lua_type":"Player?"},{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":248,"path":"lib/PlayerUtil.lua"}},{"name":"GetHeadFromCharacterAsync","desc":"Returns the head of the given character, if it exists.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","source":{"line":256,"path":"lib/PlayerUtil.lua"}},{"name":"GetHeadFromCharacter","desc":"Returns the head of the given character, if it exists; and waits if it doesn\'t.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":271,"path":"lib/PlayerUtil.lua"}},{"name":"GetHeadFromPlayerAsync","desc":"Returns the head of the given player, if it exists.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","source":{"line":285,"path":"lib/PlayerUtil.lua"}},{"name":"GetHeadFromPlayer","desc":"Returns the head of the given player, if it exists; and waits if it doesn\'t.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"BasePart?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":301,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromHumanoidAsync","desc":"Returns the animator of the given humanoid, if it exists.","params":[{"name":"humanoid","desc":"","lua_type":"Humanoid?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","source":{"line":316,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromHumanoid","desc":"Returns the animator of the given humanoid, if it exists; and waits if it doesn\'t.","params":[{"name":"humanoid","desc":"","lua_type":"Humanoid?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":327,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromCharacterAsync","desc":"Returns the animator of the given character, if it exists.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","source":{"line":341,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromCharacter","desc":"Returns the animator of the given character, if it exists; and waits if it doesn\'t.","params":[{"name":"character","desc":"","lua_type":"Model?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":353,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromPlayerAsync","desc":"Returns the animator of the given player, if it exists.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","source":{"line":364,"path":"lib/PlayerUtil.lua"}},{"name":"GetAnimatorFromPlayer","desc":"Returns the animator of the given player, if it exists; and waits if it doesn\'t.","params":[{"name":"player","desc":"","lua_type":"Player?"}],"returns":[{"desc":"","lua_type":"Animator?\\r\\n"}],"function_type":"method","yields":true,"source":{"line":376,"path":"lib/PlayerUtil.lua"}}],"properties":[{"name":"player","desc":"A reference to the [Player].","lua_type":"Value<Player>","realm":["Client"],"source":{"line":391,"path":"lib/PlayerUtil.lua"}},{"name":"character","desc":"A reference to the [Player]\'s character [Model].","lua_type":"Value<Model?>","realm":["Client"],"source":{"line":398,"path":"lib/PlayerUtil.lua"}},{"name":"humanoid","desc":"A reference to the [Humanoid] of the [Player].","lua_type":"Value<Humanoid>","realm":["Client"],"source":{"line":405,"path":"lib/PlayerUtil.lua"}},{"name":"animator","desc":"A reference to the [Player]\'s [Animator].","lua_type":"Value<Animator?>","realm":["Client"],"source":{"line":412,"path":"lib/PlayerUtil.lua"}},{"name":"head","desc":"A reference to the [Player]\'s head [BasePart].","lua_type":"Value<BasePart?>","realm":["Client"],"source":{"line":419,"path":"lib/PlayerUtil.lua"}},{"name":"root","desc":"A reference to the [Player]\'s root [BasePart].","lua_type":"Value<BasePart?>","realm":["Client"],"source":{"line":426,"path":"lib/PlayerUtil.lua"}},{"name":"state","desc":"A reference to the [Enum.HumanoidStateType] of the [Player]\'s [Humanoid].","lua_type":"Value<Enum.HumanoidStateType?, Enum.HumanoidStateType?>","realm":["Client"],"source":{"line":433,"path":"lib/PlayerUtil.lua"}},{"name":"Respawned","desc":"A [Signal] that is fired when the [Player]\'s character [Model] is created, and passes along its [Humanoid].","lua_type":"Signal<Humanoid>","tags":["Event"],"realm":["Client"],"source":{"line":441,"path":"lib/PlayerUtil.lua"}},{"name":"Died","desc":"A [Signal] that is fired when the [Player]\'s [Humanoid] dies, and passes along the character [Model] and [Humanoid].","lua_type":"Signal<Model, Humanoid>","tags":["Event"],"realm":["Client"],"source":{"line":449,"path":"lib/PlayerUtil.lua"}}],"types":[],"name":"PlayerUtil","desc":"A library of helpful player / character related functions.","source":{"line":29,"path":"lib/PlayerUtil.lua"}}')}}]);