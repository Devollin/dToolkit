"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7969],{68499:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetMagnitude","desc":"Returns the magnitude between the two vectors.\\n\\n:::note Consistency\\na AND b must be the same data type in order for this to work properly.","params":[{"name":"a","desc":"","lua_type":"Vector2 | Vector3"},{"name":"b","desc":"","lua_type":"Vector2 | Vector3"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":25,"path":"lib/Util.lua"}},{"name":"RoundNumber","desc":"Returns a rounded number.","params":[{"name":"number","desc":"The number you want to round.","lua_type":"number"},{"name":"place","desc":"The place value you want to round to; defaults to 0.","lua_type":"number?"}],"returns":[{"desc":"Returns the number rounded to the given place value or 0.","lua_type":"number"}],"function_type":"method","source":{"line":48,"path":"lib/Util.lua"}},{"name":"FindHypotenuse","desc":"Gets the hypotenuse between a and b.","params":[{"name":"a","desc":"","lua_type":"number"},{"name":"b","desc":"","lua_type":"number"}],"returns":[{"desc":"The length of the hypotenuse.","lua_type":"number"}],"function_type":"method","source":{"line":61,"path":"lib/Util.lua"}},{"name":"GetDictionaryLength","desc":"Returns the length of the dictionary.","params":[{"name":"dictionary","desc":"","lua_type":"{[any]: any}"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":69,"path":"lib/Util.lua"}},{"name":"TableMerge","desc":"Returns a new shallow-merged table of b into a.","params":[{"name":"a","desc":"","lua_type":"{[any]: any}"},{"name":"b","desc":"","lua_type":"{[any]: any}"}],"returns":[{"desc":"","lua_type":"{[any]: any}\\r\\n"}],"function_type":"method","source":{"line":83,"path":"lib/Util.lua"}},{"name":"DeepTableMerge","desc":"Returns a deep-merged table of table b into table a.","params":[{"name":"a","desc":"","lua_type":"{[any]: any}"},{"name":"b","desc":"","lua_type":"{[any]: any}"}],"returns":[{"desc":"","lua_type":"{[any]: any}\\r\\n"}],"function_type":"method","source":{"line":101,"path":"lib/Util.lua"}},{"name":"DeepCloneTable","desc":"Returns a deep-copied table of table a.","params":[{"name":"a","desc":"","lua_type":"{[any]: any}"}],"returns":[{"desc":"","lua_type":"{[any]: any}\\r\\n"}],"function_type":"method","source":{"line":135,"path":"lib/Util.lua"}},{"name":"ShuffleArray","desc":"Returns a copy of the given array, but with its contents shuffled.","params":[{"name":"array","desc":"","lua_type":"{any}"}],"returns":[{"desc":"","lua_type":"{any}\\r\\n"}],"function_type":"method","source":{"line":154,"path":"lib/Util.lua"}},{"name":"RandomPickFromArray","desc":"Returns a random value picked out from the array.","params":[{"name":"array","desc":"","lua_type":"{any}"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":175,"path":"lib/Util.lua"}},{"name":"Synth","desc":"Creates an object or applies given properties to a given object, and returns it.","params":[{"name":"object","desc":"An instance, or string defining what instance to create.","lua_type":"string | Instance"},{"name":"properties","desc":"A dictionary of properties to apply to the instance.","lua_type":"{[string]: any}"}],"returns":[{"desc":"","lua_type":"Instance Returns the given object or specified object with the properties applied to it."}],"function_type":"method","source":{"line":189,"path":"lib/Util.lua"}},{"name":"ApplyToGroup","desc":"Returns the given objects with the properties applied to each instance.","params":[{"name":"objects","desc":"","lua_type":"{[any]: Instance}"},{"name":"properties","desc":"A dictionary of properties to apply to the instances.","lua_type":"{[string]: any}"}],"returns":[],"function_type":"method","source":{"line":220,"path":"lib/Util.lua"}},{"name":"GetVolumeOfPart","desc":"Returns the volume of the part, or 0 if it cannot be calculated.","params":[{"name":"part","desc":"","lua_type":"BasePart?"}],"returns":[{"desc":"The volume of \'part\', or 0 if there is no part.","lua_type":"number"}],"function_type":"method","source":{"line":237,"path":"lib/Util.lua"}},{"name":"Weld","desc":"Welds a model together.","params":[{"name":"model","desc":"","lua_type":"Model"},{"name":"corePart","desc":"The part to weld every other part to.","lua_type":"BasePart"},{"name":"ignore","desc":"A table of instances to ignore when welding.","lua_type":"{[any]: BasePart}?"}],"returns":[],"function_type":"method","source":{"line":259,"path":"lib/Util.lua"}},{"name":"Presets","desc":"Reconsiles the data from modifiers into either the value of the list of index name, or data indexed as Default in list.","params":[{"name":"list","desc":"","lua_type":"{[string]: any}"},{"name":"name","desc":"","lua_type":"string?"},{"name":"modifiers","desc":"","lua_type":"{[string]: any}"}],"returns":[{"desc":"","lua_type":"{[string]: any}\\r\\n"}],"function_type":"method","source":{"line":294,"path":"lib/Util.lua"}}],"properties":[],"types":[],"name":"Util","desc":"A library of helpful general-use functions.","source":{"line":17,"path":"lib/Util.lua"}}')}}]);